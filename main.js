(()=>{"use strict";var __webpack_modules__={592:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "B": () => /* binding */ scaleSwitch,\n  "c": () => /* binding */ temperatures\n});\n\n;// CONCATENATED MODULE: ./src/modal.ts\nconst modal = document.querySelector(".error-modal");\r\nconst xIcon = document.querySelector(".close-modal");\r\nconst closeButton = document.querySelector("button");\r\nconst overlay = document.querySelector("#overlay");\r\nlet modalOpen = false;\r\nconsole.log(modal);\r\nfunction toggleErrorModal() {\r\n    if (modalOpen) {\r\n        modal.style.transform = "scale(0)";\r\n        overlay.style.opacity = "0";\r\n    }\r\n    else {\r\n        modal.style.transform = "scale(1)";\r\n        overlay.style.opacity = "1";\r\n    }\r\n}\r\nxIcon.addEventListener("click", () => {\r\n    modal.style.transform = "scale(0)";\r\n    overlay.style.opacity = "0";\r\n});\r\ncloseButton.addEventListener("click", () => {\r\n    modal.style.transform = "scale(0)";\r\n    overlay.style.opacity = "0";\r\n});\r\n\r\n\n;// CONCATENATED MODULE: ./src/scalecheck.ts\n\r\nfunction changeScale() {\r\n    if (scaleSwitch.checked) {\r\n        toggleFahrenheit();\r\n    }\r\n    else {\r\n        toggleCelsius();\r\n    }\r\n}\r\nfunction toggleFahrenheit() {\r\n    temperatures.map((temp) => {\r\n        temp.innerHTML =\r\n            Math.round((5 / 9) * (parseInt(temp.innerHTML) - 32)).toString() + "&deg";\r\n    });\r\n}\r\nfunction toggleCelsius() {\r\n    temperatures.map((temp) => {\r\n        temp.innerHTML =\r\n            Math.round((9 / 5) * parseInt(temp.innerHTML) + 32).toString() + "&deg";\r\n    });\r\n}\r\n\r\n\n;// CONCATENATED MODULE: ./src/index.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nconst src_form = document.querySelector("form");\r\nconst input = document.querySelector(`input[type="text"]`);\r\nconst scaleToggleContainer = (document.querySelector(".scale-container"));\r\nconst scaleSwitch = (document.querySelector("#temperature-scale"));\r\nconst weatherCardsContainer = (document.querySelector(".weather-cards-container"));\r\nlet cities = JSON.parse(localStorage.getItem("cities") || "[]");\r\ndisplayCards();\r\nclass City {\r\n    constructor(city, temperature, icon, description) {\r\n        this.city = city;\r\n        this.temperature = temperature;\r\n        this.icon = icon;\r\n        this.description = description;\r\n    }\r\n}\r\nfunction save() {\r\n    localStorage.setItem("cities", JSON.stringify(cities));\r\n}\r\nfunction getWeather() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const response = yield fetch(`https://api.openweathermap.org/data/2.5/weather?q=${input.value}&appid=1c954fe59dca8548d2eb13416b4f9da3`, { mode: "cors" });\r\n            const data = yield response.json();\r\n            createCityCard(data);\r\n            // weatherDisplay.style.display = "block";\r\n            scaleToggleContainer.style.display = "block";\r\n            console.log(data);\r\n        }\r\n        catch (_a) {\r\n            toggleErrorModal();\r\n        }\r\n    });\r\n}\r\nfunction createCityCard(data) {\r\n    const cityAndCountry = `${data["name"]}, ${data["sys"]["country"]}`;\r\n    const realTemperature = Math.round(((data["main"]["temp"] - 273.15) * 9) / 5 + 32).toString() +\r\n        "&deg";\r\n    const icon = `<img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/162656/${data.weather[0]["icon"]}.svg"`;\r\n    const description = data["weather"][0]["description"];\r\n    const cityCard = new City(cityAndCountry, realTemperature, icon, description);\r\n    cities.push(cityCard);\r\n    displayCards();\r\n    scaleSwitch.checked = false;\r\n    temperatures = [...Array.from(document.querySelectorAll(".temperature"))];\r\n    save();\r\n}\r\nfunction displayCards() {\r\n    weatherCardsContainer.innerHTML = cities\r\n        .map((city, i) => {\r\n        return `<div class="display" data-index=${i}>\r\n      <span class="close">x</span>\r\n      <h2 class="name">${city.city}</h2>\r\n      <p class="icon">${city.icon}</p>\r\n      <p class="temperature">${city.temperature}</p>\r\n      <p class="description">${city.description.toUpperCase()}</p>\r\n    </div>`;\r\n    })\r\n        .join("");\r\n    const closeIcons = [...Array.from(document.querySelectorAll(".close"))];\r\n    const weatherDisplay = [...Array.from(document.querySelectorAll(".display"))];\r\n    closeIcons.forEach((icon) => icon.addEventListener("click", (e) => {\r\n        const target = e.target;\r\n        const parent = target.parentElement;\r\n        parent === null || parent === void 0 ? void 0 : parent.remove();\r\n        cities.splice(parent === null || parent === void 0 ? void 0 : parent.dataset.index, 1);\r\n        save();\r\n    }));\r\n}\r\nsrc_form.addEventListener("submit", (e) => {\r\n    e.preventDefault();\r\n    getWeather();\r\n    src_form.reset();\r\n});\r\nscaleSwitch.addEventListener("click", changeScale);\r\nlet temperatures = [...Array.from(document.querySelectorAll(".temperature"))];\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///592\n')}},__webpack_module_cache__={};function __webpack_require__(Q){if(__webpack_module_cache__[Q])return __webpack_module_cache__[Q].exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__(592)})();